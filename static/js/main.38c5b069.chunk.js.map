{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","turn","gameEnded","winner","undefined","gameState","board","Array","fill","totalMoves","event","this","target","dataset","square","innerText","setState","result","checkWinner","winnerLine","moves","i","length","console","log","id","onClick","e","clicked","className","data-square","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAEqBA,G,kBAEnB,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTC,KAAM,IACNC,WAAU,EACVC,YAAQC,GAEV,EAAKC,UAAU,CACbC,MAAOC,MAAM,GAAGC,KAAK,IACrBC,WAAY,GATH,E,qEAcLC,GAEiD,IAApDC,KAAKN,UAAUC,MAAMI,EAAME,OAAOC,QAAQC,UAC3CH,KAAKN,UAAUC,MAAMI,EAAME,OAAOC,QAAQC,QAAUH,KAAKX,MAAMC,KAC/DS,EAAME,OAAOG,UAAUJ,KAAKX,MAAMC,KAElCU,KAAKK,SAAS,CACdf,KAAwB,KAAlBU,KAAKX,MAAMC,KAAY,IAAM,OAIrC,IAAIgB,EAAQN,KAAKO,cAEN,KAARD,EACDN,KAAKK,SAAS,CACZd,WAAU,EACVC,OAAO,IACPgB,WAAY,mBAGC,KAARF,EACPN,KAAKK,SAAS,CACZd,WAAU,EACVC,OAAO,IACPgB,WAAW,mBAIE,QAARF,GACPN,KAAKK,SAAS,CACZd,WAAU,EACVC,OAAO,OACPgB,WAAW,qB,oCAQf,IAFA,IAAIC,EAAQ,CAAC,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,IACvEd,EAAQK,KAAKN,UAAUC,MACnBe,EAAE,EAAGA,EAAED,EAAME,OAAQD,IAC3B,GAAGf,EAAMc,EAAMC,GAAG,KAAOf,EAAMc,EAAMC,GAAG,KAAOf,EAAMc,EAAMC,GAAG,KAAKf,EAAMc,EAAMC,GAAG,IAChF,OAAOf,EAAMc,EAAMC,GAAG,IAMtB,GADJE,QAAQC,IAAIb,KAAKN,UAAUI,YACS,GAA7BE,KAAKN,UAAUI,WAChB,MAAO,S,+BAML,IAAD,OACP,OACE,yBAAKgB,GAAG,QACN,yBAAKA,GAAG,UAAUd,KAAKX,MAAMmB,YAC7B,yBAAKM,GAAG,QAEN,yDAEF,yBAAKA,GAAG,QAAQC,QAAS,SAACC,GAAD,OAAK,EAAKC,QAAQD,KACzC,yBAAKE,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,Y,GAxFbC,cCUbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.38c5b069.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nexport default class App extends Component {\n\n  constructor(){\n    super();\n    this.state={\n      turn: 'X',\n      gameEnded:false,\n      winner: undefined,\n    };\n    this.gameState={\n      board: Array(9).fill(''),\n      totalMoves: 0\n    }\n   \n  }\n\n  clicked(event){\n\n    if(this.gameState.board[event.target.dataset.square] ==''){\n      this.gameState.board[event.target.dataset.square] = this.state.turn;\n      event.target.innerText=this.state.turn;\n\n      this.setState({\n      turn: this.state.turn== 'X'? 'O' : 'X',\n      }) \n    }\n\n    var result =this.checkWinner();\n\n    if(result=='X'){\n      this.setState({\n        gameEnded:true,\n        winner:'X',\n        winnerLine: 'Match won by X'\n      });\n      \n    }else if(result=='O'){\n      this.setState({\n        gameEnded:true,\n        winner:'O',\n        winnerLine:'Match won by O'\n\n      });\n      \n    }else if(result=='draw'){\n      this.setState({\n        gameEnded:true,\n        winner:'draw',\n        winnerLine:'Match is Drawn'\n      })\n    }\n  }\n\n  checkWinner(){\n    var moves = [[0,3,6], [1,4,7],[2,5,8],[0,4,8],[2,4,6],[0,1,2],[3,4,5],[6,7,8]];\n    var board = this.gameState.board;\n    for(let i=0; i<moves.length; i++){\n      if(board[moves[i][0]] == board[moves[i][1]] && board[moves[i][1]]==board[moves[i][2]]){\n        return board[moves[i][0]];\n        }\n\n    }\n\n    console.log(this.gameState.totalMoves);\n        if(this.gameState.totalMoves == 9){\n          return 'draw';\n      }\n     \n    \n  }\n\n  render() {\n    return (\n      <div id=\"game\">\n        <div id=\"status\">{this.state.winnerLine}</div>\n        <div id=\"head\">\n\n          <h4>This is Tic Tac Toe Game</h4>\n        </div>\n        <div id=\"board\" onClick={(e)=>this.clicked(e)}>\n          <div className=\"square\" data-square=\"0\" ></div>\n          <div className=\"square\" data-square=\"1\" ></div>\n          <div className=\"square\" data-square=\"2\" ></div>\n          <div className=\"square\" data-square=\"3\" ></div>\n          <div className=\"square\" data-square=\"4\" ></div>\n          <div className=\"square\" data-square=\"5\" ></div>\n          <div className=\"square\" data-square=\"6\" ></div>\n          <div className=\"square\" data-square=\"7\" ></div>\n          <div className=\"square\" data-square=\"8\" ></div>\n  \n        </div>\n  \n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}